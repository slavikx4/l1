package main

import (
	"math/rand"
)

// функция быстрой сортировки
func qsort(a []int) []int {
	// если длина массива меньше 2, то нету смысла что-то сортировать,
	// а значит выход из заячей норы
	if len(a) < 2 {
		return a
	}

	// указываем границы сортировки
	left, right := 0, len(a)-1

	// пивот выбирается рандомно
	pivotIndex := rand.Int() % len(a)

	// ставим элемент пивота на правую границу
	a[pivotIndex], a[right] = a[right], a[pivotIndex]

	// переставляем все элементы, которые меньше пивота в левую сторону от пивота
	for i := range a {
		// если очередной элемент меньше, чем изначальное значение пивота
		if a[i] < a[right] {
			// то переставляем элемент налево
			a[i], a[left] = a[left], a[i]
			// сдвигаем индекс, чтобы не трогать уже меньшее число, чем пивот
			left++
		}
	}

	// помещаем пивот после последнего меньшего
	a[left], a[right] = a[right], a[left]

	// спуск в кроличью нору - как бы проявление рекурсии
	// сортируем массив меньшей длины в левой части
	qsort(a[:left])
	// сортируем массив меньшей длины в правой части
	qsort(a[left+1:])

	// возвращаем слайс
	return a
}

// основной поток
func main() {

	// массив входных данных
	array := make([]int, 10)

	// инициализируем массив
	for i := 0; i < 10; i++ {
		array[i] = rand.Intn(50)
	}

	// сортируем массив
	qsort(array)
}
