package main

import "sync"

// способ с обычной мапой и мьютексом

// основной поток
func main() {

	// счётчик ожидания выполнения завершения выполнения всех нужных вычислений
	wg := &sync.WaitGroup{}

	// мьютекс для отсутсвия гонки данных
	mu := &sync.Mutex{}

	// создаём мапу
	mp := make(map[int]int)

	// запускаем 10 горутин, каждая из которых записываает свой порядковй номер как ключ
	for i := 0; i < 10; i++ {
		// добавляем к счётчику 1
		wg.Add(1)
		// передаём в параметры i, так как иначе горутина не сделает себе копию i на момент вызова горутины
		go func(i int) {
			// по завершению работы убавляем на 1
			defer wg.Done()
			// блокируем доступ для остальных горутин
			mu.Lock()
			// выполняем запись
			mp[i] = i + 100
			// открываем доступ для остальных горутин
			mu.Unlock()
		}(i)
	}

	// ожидаем, пока выполнятся все горутины
	wg.Wait()
}
