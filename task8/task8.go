package main

import (
	"fmt"
	"math/rand"
)

// основной поток
func main() {

	// число int64
	num := rand.Int63()
	// позиция в которой будет замены бита
	pos := 12

	// результат замены бита на 0
	res0 := setNull(num, pos)
	// результат замены бита на 1
	res1 := setOne(num, pos)

	// вывод изначального числа
	fmt.Printf("%b\n", num)
	// вывод результата замены на 0
	fmt.Printf("%b\n", res0)
	// вывод результата замены на 1
	fmt.Printf("%b\n", res1)

}

// setNull функция, получающая на вход число int64 и позицию int, заменяет бит на 0
func setNull(num int64, pos int) int64 {
	// побитовое умножение числа с маской
	// -маска: единица всегда в битовом представлении выглядит так: 001, где нули - незначащий
	// -передвигаем 1 влево на позицию, учитывая что сама 1 уже стояла на первой позиции
	// -далее оператор инверсии превращает в что-то такое: 110111, где раньше на месте единиц стоялти нули и наоборот
	// -соответствующие биты перемножаются
	return num & ^(1 << (pos - 1))
}

// setOne функция, получающая на вход число int64 и позицию int, заменяет бит на 1
func setOne(num int64, pos int) int64 {
	// побитовое сложение
	// -маска: единица всегда в битовом представлении выглядит так: 001, где нули - незначащий
	// -передвигаем 1 влево на позицию, учитывая что сама 1 уже стояла на первой позиции
	// -соответствующие биты складываются
	return num | (1 << (pos - 1))
}
